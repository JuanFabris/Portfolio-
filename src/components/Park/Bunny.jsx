/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.0 .\public\models\Bunny.glb 
*/

import React from 'react'
import { useGraph } from '@react-three/fiber'
import { useGLTF, useAnimations } from '@react-three/drei'
import { SkeletonUtils } from 'three-stdlib'

export function Bunny(props) {
  const group = React.useRef()
  const { scene, animations } = useGLTF('./models/Bunny.glb')
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])
  const { nodes, materials } = useGraph(clone)
  const { actions } = useAnimations(animations, group)
  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Root_Scene">
        <group name="RootNode">
          <group name="CharacterArmature" rotation={[-Math.PI / 2, 0, 0]} scale={100}>
            <primitive object={nodes.Root} />
          </group>
          <group name="Bunny" rotation={[-Math.PI / 2, 0, 0]} scale={100}>
            <skinnedMesh name="Bunny_1" geometry={nodes.Bunny_1.geometry} material={materials.Bunny_Main} skeleton={nodes.Bunny_1.skeleton} />
            <skinnedMesh name="Bunny_2" geometry={nodes.Bunny_2.geometry} material={materials.Bunny_Secondary} skeleton={nodes.Bunny_2.skeleton} />
            <skinnedMesh name="Bunny_3" geometry={nodes.Bunny_3.geometry} material={materials.Eye_White} skeleton={nodes.Bunny_3.skeleton} />
            <skinnedMesh name="Bunny_4" geometry={nodes.Bunny_4.geometry} material={materials.Eye_Black} skeleton={nodes.Bunny_4.skeleton} />
          </group>
          <group name="Carrot" position={[0.011, 0, 0.101]} rotation={[-Math.PI / 2, 0, 0]} scale={100}>
            <skinnedMesh name="Carrot_1" geometry={nodes.Carrot_1.geometry} material={materials['Material.024']} skeleton={nodes.Carrot_1.skeleton} />
            <skinnedMesh name="Carrot_2" geometry={nodes.Carrot_2.geometry} material={materials['Material.011']} skeleton={nodes.Carrot_2.skeleton} />
          </group>
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('./models/Bunny.glb')
